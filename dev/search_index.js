var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = RLTypes","category":"page"},{"location":"#RLTypes","page":"Home","title":"RLTypes","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for RLTypes.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package provides types for the reinforcement learning framework. The package is loaded by the specific algorithm packages, but also exports names into the main module of Julia. The package contains important types and functions that are shared between the packages:","category":"page"},{"location":"","page":"Home","title":"Home","text":"DDPG\nDQN\nMBRL\nNNDynamics\nNODEDynamics\nODERNNDynamics\nRewards","category":"page"},{"location":"","page":"Home","title":"Home","text":"The main purpose of the package is to provide","category":"page"},{"location":"","page":"Home","title":"Home","text":"a type system for the reinforcement learning framework to enable multiple dispatch,\nset hyperparameters automatically, or at least provide a common interface for setting hyperparameters,\nto differentiate function signatures and hence enable multiple dispatch,\nprovide shared functionality, e.g. Replay Buffers.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The majority of the functionality is used internally, but certain function signatures set by the user depend on RLTypes. ","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In the julia REPL, run","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(url=\"https://github.com/SvenDuve/RLTypes.jl\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"Bring package into scope with","category":"page"},{"location":"","page":"Home","title":"Home","text":"using RLTypes","category":"page"},{"location":"#Example-usage","page":"Home","title":"Example usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"# to be used within the function call to an RL Algorithm to set hyperparameters\nAgentParameter(training_episodes=100, batch_size=128)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Check the source code for a full list of parameters.","category":"page"},{"location":"#Function-Reference","page":"Home","title":"Function Reference","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [RLTypes]","category":"page"},{"location":"#RLTypes.AgentParameter","page":"Home","title":"RLTypes.AgentParameter","text":"AgentParameter()\n\nAgent Parameters to be set by the user at function call.\n\nExample\n\nAgentParameter(training_episodes=100)\n\n\n\n\n\n","category":"type"},{"location":"#RLTypes.DiscreteReplayBuffer","page":"Home","title":"RLTypes.DiscreteReplayBuffer","text":"DiscreteBuffer(;capacity, memory, pos)\n\nA type for a discrete action space Buffer.\n\n\n\n\n\n","category":"type"},{"location":"#RLTypes.DiscreteReplayBuffer-Tuple{Int64}","page":"Home","title":"RLTypes.DiscreteReplayBuffer","text":"DiscreteReplayBuffer(capacity::Int)\n\nOuter constructor for the discrete action space buffer.\n\nExample\n\nbuffer = DiscreteReplayBuffer(1000000)\n\n\n\n\n\n","category":"method"},{"location":"#RLTypes.EnvParameter","page":"Home","title":"RLTypes.EnvParameter","text":"EnvParameter()\n\nParameters for the environment. This is called from inside the respective module.\n\n\n\n\n\n","category":"type"},{"location":"#RLTypes.ModelParameter","page":"Home","title":"RLTypes.ModelParameter","text":"ModelParameter()\n\nParameters to be set by the user for training the model of the environement.\n\nExample:\n\nModelParameter(train=true, collect_train=100, collect_test=10, train_start=1000)\n\n\n\n\n\n","category":"type"},{"location":"#RLTypes.ReplayBuffer","page":"Home","title":"RLTypes.ReplayBuffer","text":"ReplayBuffer(;capacity, memory, pos)\n\nA type for the buffer.\n\n\n\n\n\n","category":"type"},{"location":"#RLTypes.ReplayBuffer-Tuple{Int64}","page":"Home","title":"RLTypes.ReplayBuffer","text":"ReplayBuffer(capacity::Int)\n\nOuter constructor for the buffer.\n\nExample\n\nbuffer = ReplayBuffer(1000000)\n\n\n\n\n\n","category":"method"},{"location":"#RLTypes.collectTransitions!-Tuple{Any, Any, Any}","page":"Home","title":"RLTypes.collectTransitions!","text":"collectTransitions!(buffer, env, n_transitions)\n\nCollects n_transitions from the environment (env) and stores them in the buffer.\n\nExamples\n\ncollectTransitions!(buffer, env, 1000)\n\n\n\n\n\n","category":"method"},{"location":"#RLTypes.remember-Tuple{Buffer, Vararg{Any, 5}}","page":"Home","title":"RLTypes.remember","text":"remember(buffer::Buffer, state, action, reward, next_state, done)\n\nStores tuples of transitions in the buffer.\n\nExample\n\nremember(buffer, s, a, r, sÂ´, t)\n\n\n\n\n\n","category":"method"},{"location":"#RLTypes.sample-Tuple{DiscreteReplayBuffer, AgentMethod, Int64}","page":"Home","title":"RLTypes.sample","text":"sample(buffer::DiscreteReplayBuffer, method::AgentMethod, batch_size::Int)\n\nSample a batch of agent type (ie. in random order) transitions from the discrete action space buffer.\n\nExample\n\nS, A, R, S', T = sample(buffer, AgentMethod(), 64)\n\n\n\n\n\n","category":"method"},{"location":"#RLTypes.sample-Tuple{DiscreteReplayBuffer, ModelMethod, Int64}","page":"Home","title":"RLTypes.sample","text":"sample(buffer::DiscreteReplayBuffer, method::ModelMethod, batch_size::Int)\n\nSample a batch of model type (ie. in sequential order) transitions from buffer.\n\nExample\n\nS, A, R, S', T = sample(buffer, ModelMethod(), 64)\n\n\n\n\n\n","category":"method"},{"location":"#RLTypes.sample-Tuple{ReplayBuffer, AgentMethod, Int64}","page":"Home","title":"RLTypes.sample","text":"sample(buffer::Buffer, method::AgentMethod, batch_size::Int)\n\nSamples a batch of agent type (ie. in random order) transitions from the buffer.\n\nExample\n\nS, A, R, S', T = sample(buffer, AgentMethod(), 64)\n\n\n\n\n\n","category":"method"},{"location":"#RLTypes.sample-Tuple{ReplayBuffer, ModelMethod, Int64}","page":"Home","title":"RLTypes.sample","text":"sample(buffer::ReplayBuffer, method::ModelMethod, batch_size::Int)\n\nSample a batch of model type (ie. in sequential order) transitions from buffer.\n\nExample\n\nS, A, R, S', T = sample(buffer, ModelMethod(), 64)\n\n\n\n\n\n","category":"method"}]
}
